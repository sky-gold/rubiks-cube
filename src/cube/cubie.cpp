#include "cubie.h"
#include <array>
#include <cassert>
#include <iostream>

namespace cube {

const std::array<std::array<uint8_t, CORNER_CUBIE_CNT>, MOVE_CNT>
    corner_permutation = {
        {{0x4,  0x5,  0x6,  0x3,  0xc,  0xd,  0xe,  0x7,  0,    0x1,  0x2,
          0xb,  0x8,  0x9,  0xa,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x18, 0x19, 0x1a, 0x13, 0x10, 0x11,
          0x12, 0x17, 0x1c, 0x1d, 0x1e, 0x1b, 0x14, 0x15, 0x16},
         {0,    0x1,  0x2,  0x3,  0x4, 0x5,  0x6,  0x7,  0xd,  0xe,  0xc,
          0xb,  0x1e, 0x1c, 0x1d, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0xa,  0x8,  0x9, 0x1b, 0x19, 0x1a, 0x18},
         {0x12, 0x10, 0x11, 0x3,  0x1,  0x2,  0,    0x7,  0x8,  0x9, 0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x15, 0x16, 0x14, 0x13, 0x6, 0x4,
          0x5,  0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0x9,  0xa,  0x8,  0x3,  0x4,  0x5,  0x6,  0x7,  0x1a, 0x18, 0x19,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x2,  0,    0x1,  0x13, 0x14, 0x15,
          0x16, 0x17, 0x11, 0x12, 0x10, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,    0x1,  0x2,  0x3,  0x16, 0x14, 0x15, 0x7,  0x8,  0x9,  0xa,
          0xb,  0x5,  0x6,  0x4,  0xf,  0x10, 0x11, 0x12, 0x13, 0x1d, 0x1e,
          0x1c, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0xe,  0xc,  0xd},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0xc,  0xd,  0xe,  0x3,  0x8,  0x9,  0xa,  0x7,  0x4,  0x5,  0x6,
          0xb,  0,    0x1,  0x2,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x1c, 0x1d, 0x1e, 0x13, 0x18, 0x19,
          0x1a, 0x17, 0x14, 0x15, 0x16, 0x1b, 0x10, 0x11, 0x12},
         {0,    0x1,  0x2,  0x3,  0x4, 0x5,  0x6,  0x7,  0x1c, 0x1d, 0x1e,
          0xb,  0x18, 0x19, 0x1a, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0xc,  0xd,  0xe, 0x1b, 0x8,  0x9,  0xa},
         {0x14, 0x15, 0x16, 0x3,  0x10, 0x11, 0x12, 0x7,  0x8,  0x9, 0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x4,  0x5,  0x6,  0x13, 0,   0x1,
          0x2,  0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0x18, 0x19, 0x1a, 0x3, 0x4, 0x5,  0x6,  0x7,  0x10, 0x11, 0x12,
          0xb,  0xc,  0xd,  0xe, 0xf, 0x8,  0x9,  0xa,  0x13, 0x14, 0x15,
          0x16, 0x17, 0,    0x1, 0x2, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,   0x1,  0x2,  0x3,  0x1c, 0x1d, 0x1e, 0x7,  0x8,  0x9, 0xa,
          0xb, 0x14, 0x15, 0x16, 0xf,  0x10, 0x11, 0x12, 0x13, 0xc, 0xd,
          0xe, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x4,  0x5,  0x6},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0x8,  0x9,  0xa,  0x3,  0,    0x1,  0x2,  0x7,  0xc,  0xd,  0xe,
          0xb,  0x4,  0x5,  0x6,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x14, 0x15, 0x16, 0x13, 0x1c, 0x1d,
          0x1e, 0x17, 0x10, 0x11, 0x12, 0x1b, 0x18, 0x19, 0x1a},
         {0,    0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x19, 0x1a, 0x18,
          0xb,  0xa,  0x8,  0x9,  0xf,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x1e, 0x1c, 0x1d, 0x1b, 0xd,  0xe,  0xc},
         {0x6,  0x4,  0x5,  0x3,  0x15, 0x16, 0x14, 0x7,  0x8,  0x9,  0xa,
          0xb,  0xc,  0xd,  0xe,  0xf,  0x1,  0x2,  0,    0x13, 0x12, 0x10,
          0x11, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e},
         {0x11, 0x12, 0x10, 0x3, 0x4, 0x5,  0x6,  0x7,  0x2,  0,    0x1,
          0xb,  0xc,  0xd,  0xe, 0xf, 0x1a, 0x18, 0x19, 0x13, 0x14, 0x15,
          0x16, 0x17, 0x9,  0xa, 0x8, 0x1b, 0x1c, 0x1d, 0x1e},
         {0,   0x1,  0x2,  0x3,  0xe,  0xc,  0xd,  0x7,  0x8,  0x9, 0xa,
          0xb, 0x1d, 0x1e, 0x1c, 0xf,  0x10, 0x11, 0x12, 0x13, 0x5, 0x6,
          0x4, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x16, 0x14, 0x15}}};
const std::array<std::array<uint8_t, EDGE_CUBIE_CNT>, MOVE_CNT>
    edge_permutation = {
        {{0x5, 0x4, 0x1, 0,   0x7,  0x6,  0x3,  0x2,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x13, 0x12, 0x17, 0x16, 0x11, 0x10, 0x15, 0x14},
         {0,   0x1, 0x2,  0x3,  0x4,  0x5,  0xf,  0xe,  0x8,  0x9,  0xa, 0xb,
          0x7, 0x6, 0x17, 0x16, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0xd, 0xc},
         {0x9, 0x8, 0x2, 0x3, 0x4, 0x5, 0x6,  0x7,  0x11, 0x10, 0x1,  0,
          0xc, 0xd, 0xe, 0xf, 0xb, 0xa, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,    0x1,  0xd, 0xc, 0x4,  0x5,  0x6, 0x7, 0x3,  0x2,  0xa,  0xb,
          0x13, 0x12, 0xe, 0xf, 0x10, 0x11, 0x9, 0x8, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0xb,  0xa,  0x6,  0x7,  0x8, 0x9, 0x15, 0x14,
          0xc, 0xd, 0x5, 0x4, 0x10, 0x11, 0x12, 0x13, 0xf, 0xe, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0x6, 0x7, 0x4, 0x5, 0x2,  0x3,  0,    0x1,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x16, 0x17, 0x14, 0x15, 0x12, 0x13, 0x10, 0x11},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x16, 0x17, 0x8,  0x9,  0xa, 0xb,
          0xe, 0xf, 0xc, 0xd, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x6, 0x7},
         {0x10, 0x11, 0x2, 0x3, 0x4, 0x5, 0x6,  0x7,  0xa,  0xb,  0x8,  0x9,
          0xc,  0xd,  0xe, 0xf, 0,   0x1, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x12, 0x13, 0x4,  0x5,  0x6, 0x7, 0xc,  0xd,  0xa,  0xb,
          0x8, 0x9, 0xe,  0xf,  0x10, 0x11, 0x2, 0x3, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x14, 0x15, 0x6,  0x7,  0x8, 0x9, 0xe,  0xf,
          0xc, 0xd, 0xa, 0xb, 0x10, 0x11, 0x12, 0x13, 0x4, 0x5, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0x3, 0x2, 0x7, 0x6, 0x1,  0,    0x5,  0x4,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2, 0x3, 0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xa,  0xb,
          0xc, 0xd, 0xe, 0xf, 0x15, 0x14, 0x11, 0x10, 0x17, 0x16, 0x13, 0x12},
         {0,    0x1,  0x2, 0x3, 0x4,  0x5,  0xd,  0xc,  0x8,  0x9,  0xa, 0xb,
          0x17, 0x16, 0x7, 0x6, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0xf, 0xe},
         {0xb, 0xa, 0x2, 0x3, 0x4, 0x5, 0x6,  0x7,  0x1,  0,    0x11, 0x10,
          0xc, 0xd, 0xe, 0xf, 0x9, 0x8, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x9, 0x8, 0x4,  0x5,  0x6, 0x7, 0x13, 0x12, 0xa,  0xb,
          0x3, 0x2, 0xe, 0xf, 0x10, 0x11, 0xd, 0xc, 0x14, 0x15, 0x16, 0x17},
         {0,   0x1, 0x2,  0x3,  0xf,  0xe,  0x6,  0x7,  0x8, 0x9, 0x5,  0x4,
          0xc, 0xd, 0x15, 0x14, 0x10, 0x11, 0x12, 0x13, 0xb, 0xa, 0x16, 0x17}}};

void CalcPermutationTable() {
  std::array<std::array<uint8_t, 8>, FACE_CNT> corner_pos_rotate;
  for (int face = 0; face < FACE_CNT; ++face) {
    for (int i = 0; i < 8; ++i) {
      corner_pos_rotate[face][i] = i;
    }
  }
  corner_pos_rotate[Face::U][0] = 1;
  corner_pos_rotate[Face::U][1] = 3;
  corner_pos_rotate[Face::U][3] = 2;
  corner_pos_rotate[Face::U][2] = 0;

  corner_pos_rotate[Face::D][4] = 6;
  corner_pos_rotate[Face::D][6] = 7;
  corner_pos_rotate[Face::D][7] = 5;
  corner_pos_rotate[Face::D][5] = 4;

  corner_pos_rotate[Face::L][0] = 2;
  corner_pos_rotate[Face::L][2] = 6;
  corner_pos_rotate[Face::L][6] = 4;
  corner_pos_rotate[Face::L][4] = 0;

  corner_pos_rotate[Face::R][3] = 1;
  corner_pos_rotate[Face::R][1] = 5;
  corner_pos_rotate[Face::R][5] = 7;
  corner_pos_rotate[Face::R][7] = 3;

  corner_pos_rotate[Face::F][2] = 3;
  corner_pos_rotate[Face::F][3] = 7;
  corner_pos_rotate[Face::F][7] = 6;
  corner_pos_rotate[Face::F][6] = 2;

  corner_pos_rotate[Face::B][1] = 0;
  corner_pos_rotate[Face::B][0] = 4;
  corner_pos_rotate[Face::B][4] = 5;
  corner_pos_rotate[Face::B][5] = 1;

  std::array<std::array<uint8_t, 12>, FACE_CNT> edge_pos_rotate;
  for (int face = 0; face < FACE_CNT; ++face) {
    for (int i = 0; i < 12; ++i) {
      edge_pos_rotate[face][i] = i;
    }
  }

  edge_pos_rotate[Face::U][0] = 2;
  edge_pos_rotate[Face::U][2] = 3;
  edge_pos_rotate[Face::U][3] = 1;
  edge_pos_rotate[Face::U][1] = 0;

  edge_pos_rotate[Face::D][8] = 9;
  edge_pos_rotate[Face::D][9] = 11;
  edge_pos_rotate[Face::D][11] = 10;
  edge_pos_rotate[Face::D][10] = 8;

  edge_pos_rotate[Face::L][1] = 6;
  edge_pos_rotate[Face::L][6] = 9;
  edge_pos_rotate[Face::L][9] = 4;
  edge_pos_rotate[Face::L][4] = 1;

  edge_pos_rotate[Face::R][2] = 5;
  edge_pos_rotate[Face::R][5] = 10;
  edge_pos_rotate[Face::R][10] = 7;
  edge_pos_rotate[Face::R][7] = 2;

  edge_pos_rotate[Face::F][3] = 7;
  edge_pos_rotate[Face::F][7] = 11;
  edge_pos_rotate[Face::F][11] = 6;
  edge_pos_rotate[Face::F][6] = 3;

  edge_pos_rotate[Face::B][0] = 4;
  edge_pos_rotate[Face::B][4] = 8;
  edge_pos_rotate[Face::B][8] = 5;
  edge_pos_rotate[Face::B][5] = 0;

  std::array<std::array<uint8_t, CORNER_CUBIE_CNT>, MOVE_CNT> corner_perm;
  std::array<std::array<uint8_t, EDGE_CUBIE_CNT>, MOVE_CNT> edge_perm;

  for (size_t move = 0; move < MOVE_CNT; ++move) {
    for (size_t i = 0; i < CORNER_CUBIE_CNT; ++i) {
      corner_perm[move][i] = i;
    }
    for (size_t i = 0; i < EDGE_CUBIE_CNT; ++i) {
      edge_perm[move][i] = i;
    }
  }

  for (uint8_t face = 0; face < FACE_CNT; ++face) {
    for (uint8_t old_pos = 0; old_pos < 8; ++old_pos) {
      for (uint8_t old_rot = 0; old_rot < 3; ++old_rot) {
        const uint8_t corner_cubie = GetCornerCubie(old_pos, old_rot);

        uint8_t new_pos = corner_pos_rotate[face][old_pos];
        if (new_pos == old_pos) {
          continue;
        }
        uint8_t new_rot = old_rot;
        if (face == Face::U || face == Face::D) {
          new_rot = old_rot;
        } else if ((old_pos < 4 && new_pos < 4) ||
                   (old_pos >= 4 && new_pos >= 4)) {
          new_rot = (old_rot + 1) % 3;
        } else {
          new_rot = (old_rot + 2) % 3;
        }
        corner_perm[GetMove(1, face)][corner_cubie] = (new_pos << 2) + new_rot;
        // std::cout << MoveToString(GetMove(1, face)) << " corner_perm ("
        //           << int(old_pos) << ", " << int(old_rot) << ") -> ("
        //           << int(new_pos) << ", " << int(new_rot) << ")" << "       "
        //           << int(corner_cubie) << " -> "
        //           << int((new_pos << 2) + new_rot) << std::endl;
      }
    }
  }
  for (uint8_t old_pos = 0; old_pos < 8; ++old_pos) {
    for (uint8_t old_rot = 0; old_rot < 3; ++old_rot) {
      const uint8_t corner_cubie = GetCornerCubie(old_pos, old_rot);
      for (uint8_t face = 0; face < FACE_CNT; ++face) {
        corner_perm[GetMove(2, face)][corner_cubie] =
            corner_perm[GetMove(1, face)]
                       [corner_perm[GetMove(1, face)][corner_cubie]];
        corner_perm[GetMove(3, face)][corner_cubie] =
            corner_perm[GetMove(1, face)][corner_perm[GetMove(
                1, face)][corner_perm[GetMove(1, face)][corner_cubie]]];
      }
    }
  }

  for (uint8_t old_pos = 0; old_pos < 8; ++old_pos) {
    for (uint8_t old_rot = 0; old_rot < 3; ++old_rot) {
      const uint8_t corner_cubie = GetCornerCubie(old_pos, old_rot);
      for (uint8_t face = 0; face < FACE_CNT; ++face) {
        uint8_t new_cubie = corner_cubie;
        for (int i = 0; i < 4; ++i) {
          new_cubie = corner_perm[GetMove(1, face)][new_cubie];
        }
        assert(new_cubie != corner_cubie);
        new_cubie = corner_cubie;
        new_cubie = corner_perm[GetMove(1, face)][new_cubie];
        new_cubie = corner_perm[GetMove(3, face)][new_cubie];
        assert(new_cubie != corner_cubie);
        new_cubie = corner_cubie;
        new_cubie = corner_perm[GetMove(3, face)][new_cubie];
        new_cubie = corner_perm[GetMove(1, face)][new_cubie];
        assert(new_cubie != corner_cubie);
        new_cubie = corner_cubie;
        new_cubie = corner_perm[GetMove(2, face)][new_cubie];
        new_cubie = corner_perm[GetMove(2, face)][new_cubie];
        assert(new_cubie != corner_cubie);
      }
    }
  }

  for (uint8_t old_pos = 0; old_pos < 12; ++old_pos) {
    for (uint8_t old_flip = 0; old_flip < 2; ++old_flip) {
      const uint8_t edge_cubie = GetEdgeCubie(old_pos, old_flip);
      for (uint8_t face = 0; face < FACE_CNT; ++face) {
        // std::cout << "old_pos=" << (int)old_pos << " old_flip=" <<
        // (int)old_flip << " face=" << (int)face << " edge_cubie=" <<
        // (int)edge_cubie << std::endl; std::cout << "OK " <<
        // (int)edge_perm[GetMoveFromString("B")][0] << std::endl;
        uint8_t new_pos = edge_pos_rotate[face][old_pos];
        if (new_pos == old_pos) {
          continue;
        }
        uint8_t new_flip = (old_flip ^ 1);
        edge_perm[GetMove(1, face)][edge_cubie] = (new_pos << 1) + new_flip;
        // std::cout << "calc edge_perm[" << MoveToString(GetMove(1, face)) <<
        // "][" << (int)edge_cubie << "]=" << (int)edge_perm[GetMove(1,
        // face)][edge_cubie] << std::endl; std::cout << "calc edge_perm[" <<
        // MoveToString(GetMove(1, face)) << "][" << (int)old_pos << " " <<
        // (int)old_flip << "]=" << (int)new_pos << " " << (int)new_flip <<
        // std::endl;
      }
    }
  }
  //   std::cout << "OK " << (int)edge_perm[GetMoveFromString("B")][0] <<
  //   std::endl;

  for (uint8_t old_pos = 0; old_pos < 12; ++old_pos) {
    for (uint8_t old_flip = 0; old_flip < 2; ++old_flip) {
      const uint8_t edge_cubie = GetEdgeCubie(old_pos, old_flip);
      for (uint8_t face = 0; face < FACE_CNT; ++face) {
        edge_perm[GetMove(2, face)][edge_cubie] =
            edge_perm[GetMove(1, face)]
                     [edge_perm[GetMove(1, face)][edge_cubie]];
        edge_perm[GetMove(3, face)][edge_cubie] =
            edge_perm[GetMove(1, face)][edge_perm[GetMove(
                1, face)][edge_perm[GetMove(1, face)][edge_cubie]]];
      }
    }
  }
  for (uint8_t old_pos = 0; old_pos < 8; ++old_pos) {
    for (uint8_t old_flip = 0; old_flip < 2; ++old_flip) {
      const uint8_t edge_cubie = GetEdgeCubie(old_pos, old_flip);
      for (uint8_t face = 0; face < FACE_CNT; ++face) {
        uint8_t new_cubie = edge_cubie;
        for (int i = 0; i < 4; ++i) {
          // std::cout << "edge_perm[" << MoveToString(GetMove(1, face)) << "]["
          // << (int)new_cubie << "]=";
          new_cubie = edge_perm[GetMove(1, face)][new_cubie];
          // std::cout <<  (int)new_cubie << std::endl;
        }
        assert(new_cubie != edge_cubie);
        new_cubie = edge_cubie;
        new_cubie = edge_perm[GetMove(1, face)][new_cubie];
        new_cubie = edge_perm[GetMove(3, face)][new_cubie];
        assert(new_cubie != edge_cubie);
        new_cubie = edge_cubie;
        new_cubie = edge_perm[GetMove(3, face)][new_cubie];
        new_cubie = edge_perm[GetMove(1, face)][new_cubie];
        assert(new_cubie != edge_cubie);
        new_cubie = edge_cubie;
        new_cubie = edge_perm[GetMove(2, face)][new_cubie];
        new_cubie = edge_perm[GetMove(2, face)][new_cubie];
        assert(new_cubie != edge_cubie);
      }
    }
  }

  //   return;
  std::cout
      << "const std::array<std::array<uint8_t, CORNER_CUBIE_CNT>,  MOVE_CNT> "
         "corner_permutation={{";
  for (size_t move = 0; move < MOVE_CNT; ++move) {
    std::cout << "{";
    for (size_t i = 0; i < CORNER_CUBIE_CNT; ++i) {
      std::cout << std::showbase << std::hex << (int)(corner_perm[move][i]);
      if (i + 1 != CORNER_CUBIE_CNT) {
        std::cout << ", ";
      }
    }
    std::cout << "}";
    if (move + 1 != MOVE_CNT) {
      std::cout << ", ";
    }
  }
  std::cout << "}};" << std::endl;
  std::cout
      << "const std::array<std::array<uint8_t, EDGE_CUBIE_CNT>, MOVE_CNT> "
         "edge_permutation={{";
  for (size_t move = 0; move < MOVE_CNT; ++move) {
    std::cout << "{";
    for (size_t i = 0; i < EDGE_CUBIE_CNT; ++i) {
      std::cout << std::showbase << std::hex << (int)(edge_perm[move][i]);
      if (i + 1 != EDGE_CUBIE_CNT) {
        std::cout << ", ";
      }
    }
    std::cout << "}";
    if (move + 1 != MOVE_CNT) {
      std::cout << ", ";
    }
  }
  std::cout << "}};" << std::endl;
}

} // namespace cube